
#include "snakewidget.h"

namespace s21 {

/**
 * @brief –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –≤–∏–¥–∂–µ—Ç–∞.
 * @param parent –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç Qt (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é nullptr).
 */
SnakeWidget::SnakeWidget(QWidget *parent)
    : QWidget(parent), controller_(game_), timer_(new QTimer(this)) {
  setFixedSize(600, 440);

  controller_.HandleUserInput(UserAction_t::Start);
  lastUpdate_ = std::chrono::steady_clock::now();

  connect(timer_, &QTimer::timeout, this, [this]() {
    auto now = std::chrono::steady_clock::now();
    if (std::chrono::duration_cast<std::chrono::milliseconds>(now - lastUpdate_)
            .count() >= game_.GetSpeed()) {
      controller_.Tick();
      lastUpdate_ = now;
    }
    update();

    if (controller_.IsGameOver() || controller_.IsWin()) timer_->stop();
  });

  timer_->start(50);  // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π FPS, –∏–≥—Ä–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ —Ç–∞–π–º–µ—Ä—É –≤–Ω—É—Ç—Ä–∏
}

/**
 * @brief –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
 * @param event –°–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è).
 */
void SnakeWidget::paintEvent(QPaintEvent *) {
  QPainter painter(this);
  painter.setRenderHint(QPainter::Antialiasing);

  auto info = controller_.GetGameInfo();
  DrawField(painter, info);
  DrawInfo(painter, info);
  DrawControls(painter);
}

/**
 * @brief –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ.
 *
 * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ, –≤–∫–ª—é—á–∞—è:
 * - —á—ë—Ä–Ω—ã–π —Ñ–æ–Ω,
 * - —è–±–ª–æ–∫–æ (–∫—Ä–∞—Å–Ω—ã–π –∫—Ä—É–≥),
 * - –≥–æ–ª–æ–≤—É –∑–º–µ–π–∫–∏ (—è—Ä–∫–æ-–∑–µ–ª—ë–Ω—ã–π –∫—Ä—É–≥),
 * - —Ç–µ–ª–æ –∑–º–µ–π–∫–∏ (—Ç—ë–º–Ω–æ-–∑–µ–ª—ë–Ω—ã–µ –∫—Ä—É–≥–∏).
 *
 * @param painter –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç QPainter –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏.
 * @param info –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å —Ç–µ–∫—É—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–≥—Ä–µ (–∑–º–µ–π–∫–∞, —è–±–ª–æ–∫–æ,
 * —Ä–∞–∑–º–µ—Ä—ã).
 */
void SnakeWidget::DrawField(QPainter &painter, const SnakeInfo_t &info) {
  painter.setBrush(Qt::black);
  painter.drawRect(margin_, margin_, info.width * cellSize_,
                   info.height * cellSize_);

  painter.setBrush(QColor("#cc0000"));
  painter.setPen(Qt::NoPen);
  painter.drawEllipse(margin_ + info.apple.x * cellSize_,
                      margin_ + info.apple.y * cellSize_, cellSize_, cellSize_);

  if (!info.snake.empty()) {
    const Position &head = info.snake.front();
    painter.setBrush(QColor("#00ff00"));
    painter.drawEllipse(margin_ + head.x * cellSize_,
                        margin_ + head.y * cellSize_, cellSize_, cellSize_);
  }

  painter.setBrush(QColor("#007700"));
  for (size_t i = 1; i < info.snake.size(); ++i) {
    const Position &pos = info.snake[i];
    painter.drawEllipse(margin_ + pos.x * cellSize_,
                        margin_ + pos.y * cellSize_, cellSize_, cellSize_);
  }
}

/**
 * @brief –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ.
 *
 * –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å—á—ë—Ç–µ, —É—Ä–æ–≤–Ω–µ, —Ä–µ–∫–æ—Ä–¥–µ –∏ —Å—Ç–∞—Ç—É—Å–µ –∏–≥—Ä—ã
 * (Paused, Playing, Game Over, –∏ —Ç.–¥.) –Ω–∞ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏.
 *
 * @param painter –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç QPainter –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞.
 * @param info –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–≥—Ä—ã.
 */
void SnakeWidget::DrawInfo(QPainter &painter, const SnakeInfo_t &info) {
  int x = margin_ + info.width * cellSize_ + 20;
  int y = margin_;

  painter.setPen(Qt::black);
  QFont font("Courier", 10);
  painter.setFont(font);

  painter.drawText(x, y + 20, "üéÆ Snake Game");
  painter.drawText(x, y + 50, QString("Score: %1").arg(info.score));
  painter.drawText(x, y + 70, QString("Level: %1").arg(info.level));
  painter.drawText(x, y + 90, QString("High:  %1").arg(info.high_score));
  painter.drawText(x, y + 120,
                   QString("Status: %1")
                       .arg(info.status == GameState::Paused     ? "Paused"
                            : info.status == GameState::Playing  ? "Playing"
                            : info.status == GameState::Win      ? "Win!"
                            : info.status == GameState::GameOver ? "Game Over"
                                                                 : "Initial"));
}

/**
 * @brief –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä–æ–π.
 *
 * –í –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ –æ–∫–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–ª–∞–≤–∏—à–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
 * —Å—Ç—Ä–µ–ª–∫–∏ ‚Äî –¥–≤–∏–∂–µ–Ω–∏–µ, Enter ‚Äî —Ä–µ—Å—Ç–∞—Ä—Ç, Space ‚Äî –ø–∞—É–∑–∞, Esc ‚Äî –≤—ã—Ö–æ–¥.
 *
 * @param painter –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç QPainter –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞.
 */
void SnakeWidget::DrawControls(QPainter &painter) {
  int x = margin_;
  int y = margin_ + 420;
  painter.setPen(Qt::gray);
  painter.drawText(
      x, y, "‚Üë ‚Üì ‚Üê ‚Üí ‚Äî move | Space ‚Äî pause | Enter ‚Äî restart | Esc ‚Äî exit");
}

/**
 * @brief –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à.
 * @param event –°–æ–±—ã—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏.
 */
void SnakeWidget::keyPressEvent(QKeyEvent *event) {
  using enum UserAction_t;

  switch (event->key()) {
    case Qt::Key_Up:
      controller_.HandleUserInput(Up);
      break;
    case Qt::Key_Down:
      controller_.HandleUserInput(Down);
      break;
    case Qt::Key_Left:
      controller_.HandleUserInput(Left);
      break;
    case Qt::Key_Right:
      controller_.HandleUserInput(Right);
      break;
    case Qt::Key_Space:
      controller_.HandleUserInput(Pause);
      break;
    case Qt::Key_Enter:
    case Qt::Key_Return:
      controller_.HandleUserInput(Start);
      lastUpdate_ = std::chrono::steady_clock::now();
      timer_->start(50);
      break;
    case Qt::Key_Escape:
      close();
      break;
    default:
      break;
  }
}

}  // namespace s21
