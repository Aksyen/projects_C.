

#include "snake_game.hpp"

namespace s21 {

/// @brief –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä. –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∫–æ—Ä–¥ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
SnakeGame::SnakeGame()
    : current_dir_(Direction::Up),
      status_(GameState::Initial),
      score_(0),
      high_score_(LoadScore(high_score_path())),
      level_(1),
      speed_(1000),
      field_width_(10),
      field_height_(20) {
  std::srand(static_cast<unsigned int>(std::time(nullptr)));
}

/// @brief –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É.
void SnakeGame::Start() {
  snake_.clear();
  status_ = GameState::Playing;
  score_ = 0;
  level_ = 1;
  speed_ = 1000;

  // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–º–µ–π–∫–∞ –∏–∑ 4 –±–ª–æ–∫–æ–≤
  int start_x = field_width_ / 2;
  int start_y = field_height_ / 2;

  for (int i = 0; i < 4; ++i) {
    snake_.push_back({start_x, start_y + i});
  }

  current_dir_ = Direction::Up;
  SpawnApple();
}

/// @brief –°—Ç–∞–≤–∏—Ç –∏–≥—Ä—É –Ω–∞ –ø–∞—É–∑—É.
void SnakeGame::Pause() {
  if (status_ == GameState::Playing) {
    status_ = GameState::Paused;
  }
}

/// @brief –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–≥—Ä—É –ø–æ—Å–ª–µ –ø–∞—É–∑—ã
void SnakeGame::Resume() {
  if (status_ == GameState::Paused) {
    status_ = GameState::Playing;
  }
}

/// @brief –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–≥—Ä—É ‚Äî –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –∑–º–µ–π–∫—É, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è –∏ –µ–¥—É.
void SnakeGame::Update() {
  if (status_ != GameState::Playing) {
    return;
  }

  Move();
}

/// @brief –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∑–º–µ–π–∫—É –Ω–∞ 1 —à–∞–≥. –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É –∑–º–µ–π–∫–∏.
void SnakeGame::Move() {
  if (snake_.empty()) {
    return;
  }

  Position head = snake_.front();
  Position new_head = head;

  switch (current_dir_) {
    case Direction::Up:
      new_head.y -= 1;
      break;
    case Direction::Down:
      new_head.y += 1;
      break;
    case Direction::Left:
      new_head.x -= 1;
      break;
    case Direction::Right:
      new_head.x += 1;
      break;
  }

  if (CheckCollision(new_head)) {
    status_ = GameState::GameOver;
    return;
  }

  snake_.insert(snake_.begin(), new_head);

  if (new_head.x == apple_.x && new_head.y == apple_.y) {
    // std::cout << "üçè Apple eaten at (" << apple_.x << "," << apple_.y <<
    // ")\n";
    Grow();
    SpawnApple();
  } else {
    snake_.pop_back();  // –ü—Ä–æ—Å—Ç–æ –¥–≤–∏–∂–µ–º—Å—è –±–µ–∑ —Ä–æ—Å—Ç–∞
  }

  if (snake_.size() == 200) {
    status_ = GameState::Win;
  }
}

/// @brief –ú–µ–Ω—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –∑–º–µ–π–∫–∏.
/// @param new_dir –ù–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.
void SnakeGame::ChangeDirection(Direction new_dir) {
  // –†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–≤–æ—Ä–æ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞–ª–µ–≤–æ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ
  // –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  if (current_dir_ == new_dir) {
    current_dir_ = new_dir;
    Update();
  }

  if ((current_dir_ == Direction::Up &&
       (new_dir == Direction::Left || new_dir == Direction::Right)) ||
      (current_dir_ == Direction::Down &&
       (new_dir == Direction::Left || new_dir == Direction::Right)) ||
      (current_dir_ == Direction::Left &&
       (new_dir == Direction::Up || new_dir == Direction::Down)) ||
      (current_dir_ == Direction::Right &&
       (new_dir == Direction::Up || new_dir == Direction::Down))) {
    current_dir_ = new_dir;
  }
}

/// @brief –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ —è–±–ª–æ–∫–æ –Ω–∞ –ø–æ–ª–µ.
void SnakeGame::SpawnApple() {
  bool valid = false;

  while (!valid) {
    int x = std::rand() % field_width_;
    int y = std::rand() % field_height_;
    Position new_apple = {x, y};

    valid = std::find(snake_.begin(), snake_.end(), new_apple) == snake_.end();
    if (valid) {
      apple_ = new_apple;
    }
  }
  // std::cout << "üçè SpawnApple (" << apple_.x << "," << apple_.y << ")\n";
}

/// @brief –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ.
/// @param pos –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –≥–æ–ª–æ–≤—ã.
/// @return true ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ.
bool SnakeGame::CheckCollision(const Position& pos) const {
  if (pos.x < 0 || pos.x >= field_width_ || pos.y < 0 ||
      pos.y >= field_height_) {
    return true;  // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –≥—Ä–∞–Ω–∏—Ü–µ–π
  }

  return std::find(snake_.begin(), snake_.end(), pos) !=
         snake_.end();  // –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å —Å–∞–º–æ–π —Å–æ–±–æ–π
}

/// @brief –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á—ë—Ç –∏ —É—Ä–æ–≤–µ–Ω—å.
void SnakeGame::Grow() {
  score_ += 1;

  if (score_ > high_score_) {
    high_score_ = score_;
    SaveScore(high_score_, high_score_path());
  }

  if (score_ % 5 == 0 && level_ < 10) {
    level_++;
    speed_ = std::max(100, speed_ - 90);  // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
  }
}

/// @brief –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ—á—Ç–∏ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –∏–≥—Ä—É.
void SnakeGame::Grow_for_test() {
  score_ = 196;
  if (!snake_.empty()) {
    while (snake_.size() < 200) {
      snake_.push_back(snake_.back());  // –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–ª–∏–Ω–µ–Ω–∏–µ
    }
  }
}

///< @return true ‚Äî –µ—Å–ª–∏ –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.
bool SnakeGame::IsGameOver() const { return status_ == GameState::GameOver; }

///< @return true ‚Äî –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ø–æ–±–µ–¥–∞.
bool SnakeGame::IsWin() const { return status_ == GameState::Win; }

///< @return –í–µ–∫—Ç–æ—Ä –∫–ª–µ—Ç–æ–∫ –∑–º–µ–π–∫–∏.
const std::vector<Position>& SnakeGame::GetSnake() const { return snake_; }

///< @return –ü–æ–∑–∏—Ü–∏—è —è–±–ª–æ–∫–∞.
const Position& SnakeGame::GetApple() const { return apple_; }

///< @return –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã.
GameState SnakeGame::GetStatus() const { return status_; }

///< @return –¢–µ–∫—É—â–∏–π —Å—á—ë—Ç.
int SnakeGame::GetScore() const { return score_; }

///< @return –°–∫–æ—Ä–æ—Å—Ç—å (–º—Å –º–µ–∂–¥—É —à–∞–≥–∞–º–∏).
int SnakeGame::GetSpeed() const { return speed_; }

///< @return –†–µ–∫–æ—Ä–¥.
int SnakeGame::GetHighScore() const { return high_score_; }

///< @return –£—Ä–æ–≤–µ–Ω—å.
int SnakeGame::GetLevel() const { return level_; }

/// @brief –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
SnakeInfo_t SnakeGame::GetInfo() const {
  return SnakeInfo_t{
      .snake = snake_,
      .apple = apple_,
      .status = status_,
      .score = score_,
      .high_score = high_score_,
      .level = level_,
      .speed = speed_,
      .width = field_width_,
      .height = field_height_,
  };
}

/**
 * @brief –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—á–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ —Ñ–∞–π–ª.
 * @param score –ó–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç–∞.
 * @param file_name –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
 */
void SnakeGame::SaveScore(int score, const std::string& file_name) {
  std::ofstream file(file_name);
  if (file.is_open()) {
    file << score;
    file.close();
  }
}

/**
 * @brief –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å—á–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞.
 * @param file_name –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.
 * @return –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Å—á–µ—Ç (0, –µ—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω).
 */
int SnakeGame::LoadScore(const std::string& file_name) {
  int score = 0;
  std::ifstream file(file_name);
  if (file.is_open()) {
    file >> score;
    file.close();
  }
  return score;
}

/// @brief –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–æ—Ä–¥–∞.
std::string SnakeGame::high_score_path() {
  // –ü—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  std::filesystem::path install_path = "build";

  // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—É—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
  std::ifstream path_file("install_path.txt");
  if (path_file) {
    std::string path_from_file;
    if (std::getline(path_file, path_from_file)) {
      install_path = path_from_file;
    }
  }

  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É high_score.txt
  std::filesystem::path high_score_path = install_path / "high_score_snake.txt";

  return high_score_path.string();
}

/// @brief –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é —è–±–ª–æ–∫–∞ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤).
/// @param pos –ü–æ–∑–∏—Ü–∏—è —è–±–ª–æ–∫–∞.
void SnakeGame::SetAppleForTest(const Position& pos) {
  apple_ = pos;
  // std::cout << "üçè Test apple set to (" << apple_.x << "," << apple_.y <<
  // ")\n";
}

}  // namespace s21
